source("~/Documents/LING_440/Script_Pig_Latin_translator.R", echo=TRUE)
c(3.14, 8L)
c(3.14, 8L, "hello world")
c(3.14, 8L, "hello world", list(3,4))
c(3.14, 8L, "hello world", list(3,4), data.frame())
class(123)
class(123L)
class(3)
class(3L)
class("hello")
class(c("hello", "wolrd"))
class(T)
class(FALSE)
class(5L)
class("hello world")
walk <- function(currdir,f,arg) {
# "leave trail of bread crumbs"
savetop <- getwd()
setwd(currdir)
fls <- list.files()
arg <- f(currdir,fls,arg)
# subdirectories of this directory
dirs <- list.dirs(recursive=FALSE)
for (d in dirs) arg <- walk(d,f,arg)
setwd(savetop) # go back to calling directory
arg
}
filenames <- dir("/Users/ekb5/Corpora/Saints/txt/Volume03/")
filenames
filenames <- dir("/Users/ekb5/Corpora/Saints/txt/Volume03/", pattern = "\\.txt$")
filenames
library(tidyverse)
collector <- tibble()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?str_extract_all
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
view(collector)
source("~/.active-rstudio-document", echo=TRUE)
view(collector)
source("~/.active-rstudio-document", echo=TRUE)
view(collector)
source("~/.active-rstudio-document", echo=TRUE)
view(collector)
40/13
40/12
3*13
3*12
13*4
12*4
3.25*13
3.25*12
scan
5/7
1-.72
.887-.72
.167/.28
.72+.14
1-0.5964286
?dir
dir("/Users/ekb5/Corpora/Saints/txt/", full.names = T, recursive = T)
?dir
dir()
getwd()
cd()
cd
setwd("..")
gewed()
getwd()
?str_extract_al
?str_extract_all
library(tidyverse)
?str_extract_all
txt <- scan("/Users/ekb5/Corpora/Saints/txt/Volume01/01-ask-in-faith.txt")
txt <- scan("/Users/ekb5/Corpora/Saints/txt/Volume01/01-ask-in-faith.txt", what="char")
txt
?scan
txt <- read_file("/Users/ekb5/Corpora/Saints/txt/Volume01/01-ask-in-faith.txt")
txt
str_extract_all(txt, regex("[-’'a-z]+", ignore_case = T))
wds=str_extract_all(txt %>% str_to_upper(), regex("[-’'a-z]+", ignore_case = T))
wds
words %>% count()
words %>% table
words %>% table -> freqs
freqs
names(freqs)
freqs*100
help(package="readxl")
dir(path="/Users/ekb5/Corpora/Saints/txt/", pattern = "\\.txt$", full.names = TRUE, recursive = TRUE)
dir(path="/Users/ekb5/Corpora/Saints/txt", pattern = "\\.txt$", full.names = TRUE, recursive = TRUE)
wds <- "I love to see the temple I'm going there someday"
wds %>% str_split(" ")
library("tidyverse")
wds %>% str_split(" ")
wds %>% str_split(" ") %>% unlist()
wds %>% str_split(" ") %>% unlist() -> wds
wds
tibble(wd = wds)
tibble(wd = wds) %>% count(wd)
wds <- "I love to see the temple I'm going there someday I love to see my wife in the temple"
wds %>% str_split(" ") %>% unlist() -> wds
wds
tibble(wd = wds)
tibble(wd = wds) %>% count(wd)
tibble(wd = wds) %>% count(wd) %>% arrange(desc(wd))
tibble(wd = wds) %>% count(wd) %>% arrange(desc(n))
tibble(wd = wds) %>% count(name = "freq")
tibble(wd = wds) %>% count(wd)
tibble(wd = wds) %>% count(wd) %>% arrange(desc(n))
tibble(wd = wds) %>% count(wd) %>% arrange(desc(n)) %>% rename(freq = n)
tibble(wd = wds) %>% count(wd) %>% arrange(desc(n)) %>% rename(freq = n) %>% write_csv(file = "/Users/ekb5/Downloads/freqs.csv")
names = c("Mouse", "Kiki", "Lynx")
cat_name = readline(prompt = "Enter a name for a cat : ");
good_cat_name = function(names) {
if(cat_name %in% names == T) { print("thats a good name for a cat")
}
else {
print("yikes, I can think of better names")}
}
good_cat_name(cat_name)
good_cat_name = function(names) {
if(cat_name %in% names) { print("thats a good name for a cat")
}
else {
print("yikes, I can think of better names")}
}
good_cat_name(cat_name)
cat_name
names
cat_name %in% names
good_cat_name = function(names) {
if(cat_name %in% names) { print("thats a good name for a cat")
}
else {
print("yikes, I can think of better names")}
}
good_cat_name(cat_name)
cat_name
names
good_cat_name = function(names) {
if(cat_name %in% names) {
print("thats a good name for a cat")
} else {
print("yikes, I can think of better names")
}
}
cat_name
good_cat_name(cat_name)
good_cat_name = function(cat_name, names) {
if(cat_name %in% names) {
print("thats a good name for a cat")
} else {
print("yikes, I can think of better names")
}
}
names = c("Mouse", "Kiki", "Lynx")
cat_name = readline(prompt = "Enter a name for a cat : ");
if(cat_name %in% names == T) { print("thats a good name for a cat")
}
else {
good_cat_name(cat_name)
cat_name %in% names == T
good_cat_name = function(names) {
if(cat_name %in% names == T) { print("thats a good name for a cat")
}
else {
print("yikes, I can think of better names")}
}
good_cat_name(cat_name)
source("~/.active-rstudio-document", echo=TRUE)
names
cat_name
good_cat_name = function(cat_name) {
if(cat_name %in% names == T) { print("thats a good name for a cat")
}
else {
print("yikes, I can think of better names")}
}
good_cat_name(cat_name)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library("tidyverse")
?table
x=""
x=str_c(x, "asdf")
x
x=str_c(x, "fdsa")
x
x=str_c(x, "erty", sep = " ")
x
install.packages("stylo")
library(stylo)
clear
clear()
?html_table
?read_html
httr::set_config(httr::user_agent("me@example.com; +https://example.com/info.html"))
library("tidyverse")
?separate
library("tidyverse")
df <- tibble(one = c("Earl-Brown", "Kristi–Brown"))
df %>% separate_wider_delim(one, "-")
df %>% separate_wider_delim(one, "-", names = c("first", "second"))
df %>% separate_wider_delim(one, regex("[\\-\\–]"), names = c("first", "second"))
install.packages("quanteda")
install.packages("quanteda.textmodels")
install.packages("quanteda.textstats")
install.packages("quanteda.textplots")
install.packages("readtext")
install.packages("spacyr")
install.packages("quanteda.corpora")
version
remotes::install_github("kbenoit/quanteda.dictionaries")
install.packages("remotes")
remotes::install_github("kbenoit/quanteda.dictionaries")
library("quanteda")
data_char_ukimmig2010
data_char_ukimmig2010 %>% class()
data_char_ukimmig2010 %>% length()
corp_uk <- corpus(data_char_ukimmig2010)
corp_uk
library("require")
library("readtext")
readtext("social_media/zombies/tweets.json")
require(readtext)
readtext("social_media/zombies/tweets.json")
print(data_char_ukimmig2010)
print(corp_uk)
as.character(corp_uk)[1]
summary(corp_uk)
summary(corp_uk, n=4)
28*1.5
42+112
Name = c("Cal", "Ellie", "Ben")
Language = c("English", "English", "Dog")
# A numeric vector
Age = c(21, 20, 4)
# creates dataframe
df = data.frame(Name, Language, Age)
#prints dataframe
df
# creating vectors of information about Disney princesses
princesses <- c("Cinderella", "Belle", "Jasmine", "Sleeping Beauty")
hair_color <- c("blonde", "brunette", "black", "blonde")
dress_color <- c("blue", "yellow", "turquoise", "pink")
#create a data frame with the information about the Disney princesses
princess_data <- data.frame(Name = princesses, Hair = hair_color, Dress = dress_color)
# create a vector of more princesses
all_princesses <- c("Cinderella", "Belle", "Jasmine", "Sleeping Beauty", "Ariel", "Rapunzel", "Snow White", "Elsa", "Tiana", "Meg", "Mulan")
# Create empty vectors to store results
result1 <- character(length(all_princesses))
result2 <- logical(length(all_princesses))
#create a function that checks to see if a princess is in the list of all princesses
Check_princess <- function(princess){
#check princess in princess vector
result <- princess %in% princesses
return(result)
}
# Iterate through all_princesses vector and check for princesses
for (i in seq_along(all_princesses)) {
result1[i] <- ifelse(all_princesses[i] == "Cinderella", "Yay, Kyra's favorite!", "Not Kyra's favorite")
result2[i] <- Check_princess(all_princesses[i])
}
i
all_princesses[i]
all_princesses[i] == "Cinderella", "Yay, Kyra's favorite!", "Not Kyra's favorite"
