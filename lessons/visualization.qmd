---
title: "Visualization"
---

## Objective

-   Students visualize data with easy-to-interpret plots.

## Background

R kicks trash with visualizing data. And the go-to package for creating professional-looking plots is [`ggplot2`](https://ggplot2.tidyverse.org/), one of the core packages of the `tidyverse` ecosystem. Base R also creates plots, but anybody who's anybody is using `ggplot2`. (Okay, maybe I'm overstating this a bit, but just you wait and see if I'm lying.)

## Basics

First, we need some data in a data frame (e.g., a tibble). Let's use the `Data_ptk.xlsx` file in the LMS:

```{r}
#| eval: false
library("tidyverse")
library("readxl")

ptk <- read_excel("../../../data_analysis/datasets/Data_ptk.xlsx", sheet = "data")
glimpse(ptk)
head(ptk)
```

The function `ggplot()` (without a 2, like in the package name) creates a plotting window or palette:

```{r}
#| eval: false

ggplot()
```

The first argument to `ggplot()` is a data frame, which can be piped in:

```{r}
#| eval: false

ggplot(ptk)

# same as above, but with a pipe
ptk |> ggplot()
```

The second argument to `ggplot()` is a call to the `aes()` function (short for "aesthetics") which maps columns in the data frame to elements on the plot. The first argument to `aes()` is what will be plotted on the x-axis and the second argument, if needed, is what will be plotted on the y-axis. For example, let's put the levels of `LANG` on the x-axis:

```{r}
#| eval: false

ptk |> 
  ggplot(aes(x = LANG))
```

Or we can put the `prePhonBin` on the y-axis:

```{r}
#| eval: false

ptk |> 
  ggplot(aes(y = prePhonBin))
```

You'll notice that the above plots don't actually plot anything yet; they simply set up the plotting window with the right axis labels. We now need to add elements to the plot.

## One categorical variable

Perhaps the most basic plot is of one categorical variable. In order to see the distribution of the levels (aka. values or groups) of a categorical variable, let's create a popular option: the good ol' fashioned barplot. Note: The several layers of the plot are separated by a plus sign `+` rather than the pipe operator, and the layers are often specified with a `geom_...()` function (short for geometric object). See the section about [layers](https://ggplot2.tidyverse.org/reference/#layers) in the reference manual of ggplot2.

```{r}
#| eval: false
ptk |> 
  ggplot(aes(x = LANG)) +
  geom_bar()
```

It might be good to also get the exact number of tokens in each level with our ol' friend:

```{r}
#| eval: false
ptk |> 
  count(LANG)
```

### Activity

-   Take a look at the variety of [barplots](https://ggplot2.tidyverse.org/reference/geom_bar.html) that are available in `ggplot`.

-   Then, using the `Data_ptk.xlsx` dataset, plot the distribution of several categorical variables, for example: `LANG`, `GENRE`, `prePhonBin`, `folPhonBin`, `prevMention`, `cogStatus`, `lexClass`, `wdClass`.

## Two categorical variables

The following are popular plots to visualize the distribution of data points across two categorical variables.

### Stacked barplot

To create a stacked (aka. filled) barplot, one categorical variable is given as `x` in `aes()` and the other is given as the `fill` argument in `aes()`, for example:

```{r}
#| eval: false
ptk |> 
  ggplot(aes(x = LANG, fill = prePhonBin)) +
  geom_bar()
```

See more examples of barplot in the [docs](https://ggplot2.tidyverse.org/reference/geom_bar.html).

Follow-up question: How can we get the exact numbers of tokens in each of the subgroups displayed in the plot? After a good-faith effort, if you need help, take a look at Dr. Brown's code below:

```{r}
#| eval: false
#| code-fold: true
ptk |> 
  count(LANG, prePhonBin)
```

### Percent barplot

To create a percent barplot, that is, a stacked barplot that sums to 1.0, let's modify the previous barplot by adding the argument `position = "fill"` to `geom_bar()`, but outside of `aes()` (which isn't used at all).

```{r}
#| eval: false
ptk |> 
  ggplot(aes(x = LANG, fill=prePhonBin)) +
  geom_bar(position = "fill")
```

We notice that the y-axis is labeled "count", but those aren't counts, they're proportions. Let's change the axis labels with the `labs()` element:

```{r}
#| eval: false

ptk |> 
  ggplot(aes(x = LANG, fill=prePhonBin)) +
  geom_bar(position = "fill") +
  labs(x = "Language", y = "Proportion")
```

### Grouped barplot

To create a grouped barplot, modify the previous barplot by changing the argument to `position = "dodge"`. Simple enough.

```{r}
#| eval: false

ptk |> 
  ggplot(aes(x = LANG, fill = prePhonBin)) +
  geom_bar(position = "dodge")
```

### Mosaic plot

Another useful plot for two categorical variables is a mosaic plot, which displays proportions as relative sizes of the various pieces of the mosaic. Let's download an R package that can be used to create mosaic plots: [`vcd`](https://cran.r-project.org/web/packages/vcd/index.html) has a transparently named package name: Visualizing Categorical Data.

Let's plot `prePhonBin` on the x-axis and `LANG` on the y-axis:

```{r}
#| eval: false
library("vcd")

temp <- ptk |> 
  count(LANG, prePhonBin) |> 
  pivot_wider(names_from = prePhonBin, values_from = n)
row_names <- temp |> pull(1)
temp <- temp |> data.matrix()
temp <- temp[,-1]
rownames(temp) <- row_names
vcd::mosaic(temp, shade = TRUE, varnames = FALSE)
```

### Activity

-   Give it a whirl! Using the `Data_ptk.xlsx` dataset, plot the distribution of sets of two categorical variables, e.g., `LANG` and `GENRE`, `prePhonBin` and `folPhonBin`, `prevMention` and `cogStatus`, `lexClass` and `wdClass`, and any combination of these variables.

## One continuous variable

It is useful to visualize the distribution of continuous variables in order to see whether the variable is distributed normally or has some skew or is bimodal.

The following plots are useful for this purpose. You only need to specify the `x` argument in `aes()` within `ggplot()` with the one variable.

### Histogram

A histogram slices or bins of a continuous variable into N bins and then plots the count within each bin on the y-axis. It gives a barplot (i.e., it looks like a barplot), but instead of levels within a categorical variable, the bars are equidistant intervals across a continuous variable. Here's an example with the continuous variable `VOT` in the `ptk` dataset:

```{r}
#| eval: false
ptk |> 
  ggplot(aes(x = VOT)) +
  geom_histogram()
```

You can specify a specific number of bins with the `bins` argument, for example:

```{r}
#| eval: false
ptk |> 
  ggplot(aes(x = VOT)) +
  geom_histogram(bins = 10)
```

Instead of the number of bins (i.e., bars), you can specify the width of each bin on the scale of the variable that you're plotting. This is useful because the bin width is often more meaningful than a simple number of bins. Let's create a bin width of 0.01 seconds (aka. 10 milliseconds):

```{r}
#| eval: false
ptk |> 
  ggplot(aes(x = VOT)) +
  geom_histogram(binwidth = 0.01)
```

### Density plot

Density plots are like histograms, but they use a curved line rather than bins:

```{r}
#| eval: false
ptk |> 
  ggplot(aes(VOT)) +
  geom_density()
```

The cool thing about density plots is that we can specify that the area below the curve sum to 1. That fact will be important when we look at p-values.

Let's plot `VOT` as a density plot:

```{r}
#| eval: false
ptk |> 
  ggplot(aes(scale(VOT))) +
  geom_density(fill = "blue")
```

### Activity

Give it a go! Plot the distribution of several different continuous variables in the `ptk` dataset, and be ready to share with a neighbor and/or the class.

## Two continuous variables

Enter the mighty scatterplot!

Let's take a look at Dr. Joey Stanley's vowels, literally (well, as literally as we can).

Many thanks are expressed (this is a performative passive verb) to Joey for his data and expertise with plotting vowels. Check out this webpage on [Data Visualization](https://joeystanley.com/pages/dataviz.html).

First, let's download a package to allow us to download R packages from github, and then download the package with his vowels:

```{r}
#| eval: false
install.packages("remotes")
remotes::install_github("joeystanley/joeysvowels")
```

Let's load a dataset called `coronals` and and inspect it to see what data are included and how they are organized:

```{r}
#| eval: false
library("tidyverse")
midpoints <- joeysvowels::coronals
glimpse(midpoints)
head(midpoints)
```

Let's only use the middle of each vowel and exclude diphthongs. Notice that we save the result of the pipeline back to the same variable name:

```{r}
#| eval: false
midpoints <- midpoints|> 
    filter(percent == 50)  |> 
    select(-percent) |> 
    filter(!vowel %in% c("PRICE", "MOUTH", "CHOICE"))
```

Let's plot the first two formants of his vowels. In vowel plots, the norm is to plot F2 on the x-axis because it deals with vowel backness (i.e., depth in the mouth) and F1 on the y-axis because it deals with vowel height. Let's add a `geom_point()` layer:

```{r}
#| eval: false
midpoints |> 
  ggplot(aes(x = F2, y = F1)) +
  geom_point()
```

In order to put the points in the same position that they are within the mouth, let's reverse the scale of both the x-axis and y-axis:

```{r}
#| eval: false
midpoints |> 
  ggplot(aes(x = F2, y = F1)) +
  geom_point() +
  scale_x_reverse() +
  scale_y_reverse()
```

That's nice and all, but... how about knowing which dot corresponds to which vowel. Amirite?! Let's go! We can do so by using the `color` argument in the `aes()` call within the `ggplot()` function:

```{r}
#| eval: false
midpoints |> 
  ggplot(aes(x = F2, y = F1, color = vowel)) +
  geom_point() +
  scale_x_reverse() +
  scale_y_reverse()
```

The gray background of `ggplot` may not be as nice as white when the data points (aka. observations) are colored. Let's fix it (you guys/y'all/youse know by now that you can customize to your heart's delight in R, right?):

```{r}
#| eval: false
midpoints |> 
  ggplot(aes(x = F2, y = F1, color = vowel)) +
  geom_point() +
  scale_x_reverse() +
  scale_y_reverse() +
  theme_bw()
```

If you plan to put this plot in a publication that doesn't support color, you can use the `shape` argument instead:

```{r}
#| eval: false
midpoints |> 
  ggplot(aes(x = F2, y = F1, shape = vowel)) +
  geom_point() +
  scale_x_reverse() +
  scale_y_reverse() +
  theme_bw()
```

But, there's a problem: R only gives you six shapes by default, so... keep that in mind if you use shape instead of color. An obvious workaround is to filter only several vowels before piping the data frame into `ggplot()`, for example:

```{r}
#| eval: false
midpoints |> 
  filter(vowel %in% c("LOT", "THOUGHT")) |> 
  ggplot(aes(F2, F1, color = vowel, shape = vowel)) + 
  geom_point() + 
  scale_x_reverse() + 
  scale_y_reverse() +
  theme_bw()
```

We can add more information to the plot with the diameter and/or opacity of the dots. It usually only make sense to vary the diameter or opacity of the dots with a continuous variable.

Let's make a continuous variable of duration of the vowel within our pipeline, before passing our data frame into `ggplot()`. and then specify with the `size` argument that the diameter of the dots should be proportional to the duration of the vowel that the dot represents:

```{r}
#| eval: false
midpoints |> 
  mutate(duration = end - start) |> 
  ggplot(aes(x = F2, y = F1, color = vowel, size = duration))+
  geom_point()+
  scale_x_reverse()+
  scale_y_reverse()+
  theme_bw()
```

The above plot is nice, but the overplotting (i.e., dots on top of each other) makes it a bit hard to tell where there are many dots.

Another way to put a fourth variable in the plot is with the level of transparency fo the dots so that cluster of dots that are on top of each other are easier to see. Rather than the `size` argument, let's use the `alpha` argument:

```{r}
#| eval: false

midpoints |> 
  mutate(duration = end - start) |> 
  ggplot(aes(x = F2, y = F1, color = vowel, alpha = duration))+
  geom_point()+
  scale_x_reverse()+
  scale_y_reverse()+
  theme_bw()
```

We can also plot the duration of the vowel as the size of the dots:

```{r}
#| eval: false
midpoints |> 
  mutate(duration = end - start) |> 
  ggplot(aes(F2, F1, color = vowel, size = duration)) + 
  geom_point() + 
  scale_x_reverse() + 
  scale_y_reverse() + 
  theme_bw()
```

If the dots are too big, we can constrain the range of their sizes:

```{r}
#| eval: false
midpoints |> 
  mutate(duration = end - start) |> 
  ggplot(aes(F2, F1, color = vowel, size = duration)) + 
  geom_point() + 
  scale_x_reverse() + 
  scale_y_reverse() + 
  scale_size_continuous(range = c(3, 0.25))+
  theme_bw()
```

### Regression line

If you'd like to see how one continuous variable affects the other continuous variable, if at all, plotting a regression line (aka. trend line) is useful. This is a straight line that shows the overall trend through the points. This is done with another layer: `geom_smooth(method = lm)`. The `lm` part of this line refer to a [**l**]{.underline}inear [**m**]{.underline}odel.

Let's go back to our `ptk` dataset and put a regression line through the points off two continuous variables: `VOT` and `COG`.

```{r}
#| eval: false
ptk |> 
  ggplot(aes(x = COG, y = VOT))+
  geom_point()+ # plot individual data points
  geom_smooth(method = lm)+ # regression line
  theme_bw() # make it black and white
```

### LOESS line

Another option to show the trend through the data points of two continuous variables is a [LOESS](https://en.wikipedia.org/wiki/Local_regression) (locally estimated scatterplot smoothing) line. This is a locally based smoother line that shows the local trend of the dots closest to it. Let's modify our plot above by removing the regression line and putting in a loess line (yeah, I'm gonna use lowercase from here on out):

```{r}
#| eval: false
ptk |> 
  ggplot(aes(x = COG, y = VOT))+
  geom_point()+
  geom_smooth(method = loess)+ 
  theme_bw() 
```

We can see that the loess line shows that there is a positive relationship between COG (center of gravity) of the friction and the VOT (voice onset time) of the voiceless stops, but that the effect weakens as COG increases (because the loess line becomes flatter).

Of course, we can include both a regression line and a loess line in the same plot. And if we do that, it's probably wise to change the color of one of them and perhaps remove the 95% standard error band around the loess line:

```{r}
#| eval: false
ptk |> 
  ggplot(aes(x = COG, y = VOT))+
  geom_point()+
  geom_smooth(method = lm)+
  geom_smooth(method = loess, se = FALSE, color = "red")+ 
  theme_bw() 
```

## One continuous variable and one categorical variable

Another common situation is when we have one continuous variable and one categorical variable and we want to see how they affect each other, if at all.

### Boxplot

The go-to plot for this situation is the mighty boxplot (aka. box and whisker plot).

Let's go back to Joey's vowels. But to make it more manageable for pedagogical purposes, let's filter the vowels so that we only have front vowels, and also create a duration column while we're at it:

```{r}
#| eval: false
front_durs <- midpoints |> 
    filter(vowel %in% c("FLEECE", "KIT", "FACE", "DRESS", "TRAP")) |> 
    mutate(duration = end - start)
```

With a boxplot, we need to specify the categorical variable on the x-axis and the continuous variable on the y-axis:

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_boxplot()+
  theme_bw()
```

Boxplots are useful (and better than barplots of the means of a continuous variable) because they show both central tendency (i.e., mean and median) and dispersion or spread around the central tendency.

Here's how to interpret a boxplot:

-   The box shows the middle 50% of the data points, that is, from the first quartile (aka. Q1), which is the 25th percentile, to the third quartile (aka. Q3), which is the 75th percentile;

-   The horizontal line within the box is the median (i.e., 50th percentile);

-   The lines that extend above and below the boxes are called whiskers, and they extend 1.5 times the interquartile range (aka. IQR), which is simply Q3 - Q1, from the box, that is, the upper whisker extend 1.5 IQR above Q3, while the lower whisker extends 1.5 IQR below Q1;

-   Outliers above or below the whiskers are plotted individually as dots.

By default, `geom_boxplot()` doesn't plot the mean, but it's easy to add with another layer. See this tutorial for the [possible shapes](http://www.sthda.com/english/wiki/ggplot2-point-shapes); here we'll choose an "x" with `shape=4`:

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_boxplot()+
  stat_summary(fun.y=mean, shape=4)+
  theme_bw()
```

Another feature of boxplots in `ggplot` is that you can add notches to the box, which gives visual information about whether the levels might be statistically significantly different from each other (but a real statistical test that gives a p-value should also be run to assert statistical significance). If the notches of two boxes don't overlap vertically, this is prima facie evidence that they are likely statistically significantly different from each other.

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_boxplot(notch = TRUE)+
  stat_summary(fun.y=mean, shape=4)+
  theme_bw()
```

As a good follow-up, let's do an ANOVA (Analysis of Variance) test, and if the ANOVA returns a significant p-value, let's run a post-doc Tukey Honest Significant Difference test to see if the p-values given for the pairwise comparisons coincides with the notches.

```{r}
#| eval: false
results1 <- aov(duration ~ vowel, data = front_durs)
summary(results1)
```

Yep, something statistically significant is going on here. Next step is a post-hoc test to which pairwise comparisons are significant:

```{r}
#| eval: false
TukeyHSD(results1)
```

Yep, the p-values indicate that the notches were rightly suggestive of statistical significance.

### Violin plot

Another plot for one continuous variable and one categorical variable is the violin plot. This plot is a combination of a boxplot and a density plot. As with the boxplot above, let's add the mean as an "x". Here we go:

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_violin()+
  stat_summary(fun.y=mean, shape=4)+
  theme_bw()
```

### Adding observations

Hopefully, you're getting the idea that there are many possibilities when creating plots with R. In fact, we can mix and match, and add additional layers with additional info. For example, we can add individual observations (aka. tokens) to either the boxplot or the violin plot. Let's take a look:

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_violin()+
  geom_point()+
  theme_bw()
```

The `geom_point()` function adds the data points in a straight, vertical line, which can make it difficult to see exactly how many dots there when they are clustered together. It might be better to either move horizontally a bit, or to make them slightly transparent. In order to offset them a little bit, instead of `geom_point()`, we can use the `geom_jitter()`. And, importantly, we probably want to make sure the dots don't move vertically at all, and only move a little bit horizontally. We can specify limits for the directions with the `width` and `height` arguments in `geom_jitter()`:

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_violin()+
  geom_jitter(width = 0.1, height = 0)+
  theme_bw()
```

The order of the layers is meaningful, that is, elements of the plot will change based on where they are in the pipeline. For example, what happens if we put the `geom_jitter()` higher up in the pipeline?

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_jitter(width = 0.1, height = 0)+
  geom_violin()+
  theme_bw()
```

We can also plot individual observations on a boxplot, but it can get confusing because the outliers in a boxplot are plotted individually by `geom_boxplot()`, but also plotted by `geom_jitter()` (a bit little to the left or right):

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_boxplot()+
  geom_jitter(width = 0.1, height = 0)+
  theme_bw()
```

So, to fix that, we make the outliers that `geom_boxplot()` plots be fully transparent:

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_boxplot(outlier.alpha = 0)+
  geom_jitter(width = 0.1, height = 0)+
  theme_bw()
```

Anyone for a boxplot and a violin together? Questions: Which one should be overlaid on the other? Should the one in front be slightly transparent so that the one behind it can be seen?

### Activity

Take some time to experiment with several options (e.g., violin behind boxplot, and vice versa) and several different levels of transparency (with the `alpha` argument). If you need some help, take a look at Dr. Brown's code below:

```{r}
#| eval: false
#| code-fold: true
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_boxplot()+
  geom_violin(alpha = 0.3)+
  stat_summary(fun.y=mean, shape=4)+
  theme_bw()
```

### Violin-dot plot

Another possibility is a violin-dot plot that is available in the `see` package. First, let's download that package to our harddrive:

```{r}
#| eval: false
install.packages("see", repos = "http://cran.rstudio.com")
```

You can play with the `dots_size` and `binwidth` arguments to get the dots just right.

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration))+
  see::geom_violindot(dots_size = 0.8, binwidth = 0.005)+
  theme_bw()
```

### Rug

Another way add individual observations to a plot with is the `geom_rug()` function. It puts the tokens on the edge of the plotting area, so it's really only useful with you have exactly levels in the categorical variable. Let's

```{r}
#| eval: false
front_durs |> 
  filter(vowel %in% c("TRAP", "KIT")) |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_boxplot()+
  geom_rug(data = front_durs |> filter(vowel == "TRAP"), sides = "left")+
  geom_rug(data = front_durs |> filter(vowel == "KIT"), sides = "right")+
  theme_bw()
```

### Activity

Make two plots to visualize each of the following:

1.  The effect, if any, of the previous segment on the duration of vowels;

2.  The effect, if any, of the following segment on the duration of vowels.

Decide which type of plots you'd like (e.g., boxplot with or without notches, violin plot, boxplot and violin plot, with or without individual observations, etc.).

After a good-faith effort, if you need some help take a look at Dr. Brown's code below:

```{r}
#| eval: false
#| code-fold: true
front_durs |> 
  ggplot(aes(x = pre, y = duration))+
  geom_boxplot(notch = TRUE)+
  geom_violin(alpha = 0.5)+
  stat_summary(fun.y=mean, shape=4)+
  theme_bw()

front_durs |> 
  ggplot(aes(x = fol, y = duration))+
  geom_boxplot(notch = TRUE)+
  geom_violin(alpha = 0.5)+
  stat_summary(fun.y=mean, shape=4)+
  theme_bw()
```

## Facetting

We can one or two variables to our plot by making an individual plot for each the levels of a categorical variable or two. Let's go back to our histograms above. When we plotted the histogram of all vowels, we didn't know how the various vowels differ with respect to the distribution of their durations. There are two main facetting layers (that Dr. Brown will show here): `facet_wrap()` and `facet_grid()`.

Let's use the `midpoints` dataset from above and create a new column with the duration of the vowel, and save it to a new data frame named `midpoints_durs`:

```{r}
#| eval: false
midpoints_durs <- midpoints |> 
  mutate(duration = end - start)
```

### `facet_wrap()`

Now, let's create a single plot with subplots with a histogram, one histogram per vowel:

```{r}
#| eval: false
midpoints_durs |> 
  ggplot(aes(x = duration))+
  geom_histogram(binwidth = 0.01)+
  facet_wrap(~vowel)+
  theme_bw()
```

You may notice the scale of the x-axis and the scale of the y-axis are the same for all subplots. That's useful when you want to directly compare the subplots, which is usually the case. However, if you need to the scales to be independent of each other, you guess it, that can be specified:

```{r}
#| eval: false
midpoints_durs |> 
  ggplot(aes(x = duration))+
  geom_histogram(binwidth = 0.01)+
  facet_wrap(~vowel, scales = "free")+
  theme_bw()
```

Rather than have independent scales for both the x-axis and the y-axis, you can specify only one if you'd like with `scale = "free_x"` or `scale = "free_y"`. Give it a try!

Also, we can control the number of rows or columns that the subplots are placed in with the `nrow` or `ncol` arguments:

```{r}
#| eval: false
midpoints_durs |> 
  ggplot(aes(x = duration))+
  geom_histogram(binwidth = 0.01)+
  facet_wrap(~vowel, scales = "free", nrow = 2)+
  theme_bw()

midpoints_durs |> 
  ggplot(aes(x = duration))+
  geom_histogram(binwidth = 0.01)+
  facet_wrap(~vowel, scales = "free", ncol = 3)+
  theme_bw()
```

### `facet_grid()`

While `facet_wrap()` takes one variable, that is, column in the input data frame, `facet_grid()` takes two columns and creates a grid layout. For example, let's look at the distribution of vowel duration by vowel and by following segment:

```{r}
#| eval: false
midpoints_durs |> 
  ggplot(aes(x = duration))+
  geom_histogram(binwidth = 0.025)+
  facet_grid(fol~vowel)+
  theme_bw()
```

This layout doesn't allow you to specify the number of rows nor of columns, nor allow the scales to vary independently.

### Activity

Your turn! Make a plot with the distribution of durations by vowel and by preceding segment. Feel free to create histograms or density plots.

After a good-faith effort, if you need help, see Dr. Brown's code below:

```{r}
#| eval: false
#| code-fold: true
midpoints_durs |> 
  ggplot(aes(x = duration))+
  geom_histogram()+
  facet_grid(pre~vowel)
```

## Color

We can adjust the color of the lines and the fill of elements of a plot with a myriad of possibilities. First, let's take a look at the possibilities:

```{r}
#| eval: false
colors()
```

The RStudio IDE displays the highlights the name of the color right in the source file (aka. script). Let's change the color of the lines with the `color` argument and the color of the fill of the boxes of a boxplot with the `fill` argument:

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration)) + 
  geom_boxplot(color = "navy", fill = "lightblue")+
  theme_bw()
```

Note that when you explicitly specify colors in the call to a layer, it overrides any previous color specification. For example, if I have `ggplot()` to plot a color, but then give `geom_boxplot()` specific colors, only the colors given to the later layer are plotted.

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration, color = vowel)) + 
  geom_boxplot(color = "navy", fill = "lightblue")+
  theme_bw()
```

However, if a particular layer doesn't overwrite a color specification inherited from `ggplot()`, for example `geom_jitter()` below, then the later layer use the color from `ggplot()`:

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration, color = vowel)) + 
  geom_boxplot(color = "navy", fill = "lightblue")+
  geom_jitter(width = 0.1, height = 0)+
  theme_bw()
```

So, the `aes()` in `ggplot()` passes its color down to the subsequent layers, but `aes()` with a specific layer only affects that layer.

### Activity

Compare and contrast the following three blocks of code their resulting plots. Identify how the plots differ and how the placement of `color = vowel` affects which elements of the plot are colored.

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(vowel, duration)) + 
  geom_boxplot(aes(color = vowel)) + 
  geom_jitter(width = 0.1, height = 0) +
  theme_bw()

front_durs |> 
  ggplot(aes(vowel, duration)) + 
  geom_boxplot() + 
  geom_jitter(aes(color = vowel), width = 0.1, height = 0) +
  theme_bw()

front_durs |> 
  ggplot(aes(vowel, duration, color = vowel)) + 
  geom_boxplot() + 
  geom_jitter(width = 0.1, height = 0) +
  theme_bw()
```

Check out the docs for `scale_color_distiller()` for other color palettes.

In the code above, we only map color to a categorical variable. But, we can also map it to a continuous variable. Let's use the midpoints data frame from above:

```{r}
#| eval: false
midpoints_durs |> 
  ggplot(aes(F2, F1, color = duration)) + 
  geom_point() + 
  scale_x_reverse() + 
  scale_y_reverse()+
  theme_bw()
```

By default, `ggplot()` uses the blue-to-black palette, but we can change it manually if we'd like:

```{r}
#| eval: false
midpoints_durs |> 
  ggplot(aes(F2, F1, color = duration)) + 
  geom_point() + 
  scale_x_reverse() + 
  scale_y_reverse()+
  scale_color_gradient(low = "gold", high = "forestgreen")+
  theme_bw()
```

## Reorder levels of a categorical variable

Let's take a look at our a boxplot with jittered observations:

```{r}
#| eval: false
front_durs |> 
  ggplot(aes(x = vowel, y = duration)) + 
  geom_boxplot(outlier.alpha = 0) + 
  geom_jitter(width = 0.1, height = 0)+
  theme_bw()
```

We can also adjust levels of a categorical variable so that they appear in a different order. This can be done in one of two place: with the `dplyr` part of the pipeline, or within the `ggplot` part of the pipeline. First, let's reorder the levels with our ol' friend `fct_relevel()`:

```{r}
#| eval: false
front_durs %>%
  mutate(vowel = fct_relevel(vowel, c("FLEECE", "KIT", "FACE", "DRESS", "TRAP"))) |> 
  ggplot(aes(vowel, duration)) + 
  geom_boxplot(outlier.size = 0) + 
  geom_jitter(width = 0.1, height = 0)+
  theme_bw()
```

Or, we could ask use a `ggplot` layer to reorder the levels of this categorical variable:

```{r}
#| eval: false
front_durs %>%
  ggplot(aes(vowel, duration)) + 
  geom_boxplot(outlier.size = 0) + 
  geom_jitter(width = 0.1, height = 0)+
  scale_x_discrete(limits = c("FLEECE", "KIT", "FACE", "DRESS", "TRAP"))+ 
  theme_bw()
```

If that's confusing to have two ways to do the same thing, just choose one and forget the other. If you need help choosing, Dr. Brown's recommends the `fct_relevel()` way.

### Activity

Create a boxplot of the five vowels in the `front_durs` data frame and order the boxes by median duration. Hint: First, use some of our ol' friends in `dplyr` to create a vector of the five vowels ordered by median, then use that vector with in `fct_relevel()` or `scale_x_discrete()`.

After a good-faith effort, if you need help, take a look at Dr. Brown's code:

```{r}
#| eval: false
#| code-fold: true
ordered_by_median <- front_durs |> 
  group_by(vowel) |> 
  summarize(median_dur = median(duration)) |> 
  arrange(median_dur) |> 
  pull(vowel) |> 
  as.character()
front_durs |> 
  mutate(vowel = fct_relevel(vowel, ordered_by_median)) |> 
  ggplot(aes(x = vowel, y = duration))+
  geom_boxplot(outlier.size = 0) + 
  geom_jitter(width = 0.1, height = 0)+
  theme_bw()
```

We can also order bar of a barplot as well. Let's use the `midpoints` data frame to order the vowel in descending order by frequency:

```{r}
#| eval: false
midpoints |> 
  mutate(vowel = fct_infreq(vowel)) |> 
  ggplot(aes(vowel)) + 
  geom_bar()+
  theme_bw()
```

## Add ellipses by level in scatterplot

Let's go back to our scatterplot with F1 and F2 of vowels:

```{r}
#| eval: false
midpoints |> 
  ggplot(aes(F2, F1, color = vowel)) + 
  geom_point() + 
  scale_x_reverse() + 
  scale_y_reverse()+
  theme_bw()
```

...And now add ellipses around two-thirds of the data points per vowel:

```{r}
#| eval: false
midpoints |> 
  ggplot(aes(F2, F1, color = vowel)) + 
  geom_point(alpha = 0.5) + 
  stat_ellipse(level = 0.67) + 
  scale_x_reverse() + 
  scale_y_reverse()+
  theme_bw()
```

With so many vowels and some of the colors so close to each other, it'd be nice to add labels right on the plot. You guessed it! That can be done. First, let's create a small data frame with the mean F1 and mean F2 by vowel:

```{r}
#| eval: false
F_means <- midpoints %>%
  group_by(vowel) %>%
  summarize(mean_F1 = mean(F1), mean_F2 = mean(F2))
```

Now let's use those means in order to place the labels in the right spots on the plot:

```{r}
#| eval: false
midpoints |> 
  ggplot(aes(F2, F1, color = vowel)) + 
  geom_point(alpha = 0.5) + 
  stat_ellipse(level = 0.67) + 
  geom_text(data = F_means, aes(mean_F2, mean_F1, label = vowel), size = 5)+
  scale_x_reverse() + 
  scale_y_reverse()+
  theme_bw()
```

Given the fact that the labels are difficult to read because of the dots behind him, it might be best to use black labels:

```{r}
#| eval: false
midpoints |> 
  ggplot(aes(F2, F1, color = vowel)) + 
  geom_point(alpha = 0.5) + 
  stat_ellipse(level = 0.67) + 
  geom_text(data = F_means, aes(mean_F2, mean_F1, label = vowel), size = 5, color = "black")+
  scale_x_reverse() + 
  scale_y_reverse()+
  theme_bw()
```

## Small adjustments

### Background color

The default color background of `ggplot` is gray, for example:

```{r}
#| eval: false
p <- midpoints |> 
  ggplot(aes(F2, F1, color = vowel)) + 
  geom_point(alpha = 0.5) + 
  stat_ellipse(level = 0.67) + 
  geom_text(data = F_means, aes(mean_F2, mean_F1, label = vowel), size = 5, color = "black")+
  scale_x_reverse() + 
  scale_y_reverse()
print(p)
```

As you may have noticed by now, Dr. Brown prefers the black-n-white theme that `theme_bw()` gives.

```{r}
#| eval: false
p + theme_bw()
```

Another nice theme is `theme_minimal()`, which is basically the `theme_bw()` but without the border:

```{r}
#| eval: false
p + theme_minimal()
```

### Activity

Exploration time: Take a look at the docs for the themes by entering `?theme_bw` at the console, and then try some of the other themes. Be ready to report on which theme you like the most, and which you like the least.

### Labels

We can add custom labels to our plots with the `labs()` layer.

```{r}
#| eval: false
p + 
  theme_classic()+
  labs(title = "F1 and F2 by Vowel", subtitle = "of Joey Stanley's speech", x = "Second formant (F2)", y = "First formant (F1)")
```

We can also adjust the font, angle, horizontal and vertical adjustments of text on the plot, for example:

```{r}
#| eval: false
p +
  theme_bw()+
  theme(text = element_text(family = "Times New Roman"),)
```

Or tilt the angle of the labels:

```{r}
#| eval: false
midpoints |> 
  mutate(vowel = fct_infreq(vowel)) |> 
  ggplot(aes(vowel)) + 
  geom_bar()+
  theme_bw()+
  theme(text = element_text(family = "Times New Roman"),
        axis.text.x = element_text(angle = 45, hjust = 0.5, vjust = 0.5))
```

How about something as nasty as this?

```{r}
#| eval: false
p +
  labs(title = "Joey's vowels", subtitle = "Notice that this is left-aligned to the plotting area") + 
    theme(plot.title = element_text(hjust = 0.2, vjust = 0.6, angle = 2, family = "Avenir", size = 18, color = "forestgreen", face = "italic", lineheight = 1.2, margin = margin(t = 1, r = 0.2, b = 1.4, l = -4, unit = "cm"), debug = TRUE))
```
