---
title: "Programming basics"
---

## Objective

-   Students will learn to code the basic building blocks of programming in R.

## Primitive data types in R

-   `integer`

    -   This a whole number, i.e., there is **no** decimal component, for example "5".

    -   To specify an integer in R, type an uppercase "L" immediately to the right of the number (i.e., no space between the number and the "L").

        -   E.g., `5L`

-   `numeric`

    -   This is a number with a decimal component, for example, "3.14". Note: Unless an "L" is placed to the right of a whole number, R treats it as a numeric.

    -   To specific a numeric in R, just the type the good ol' fashioned number.

        -   E.g., `3.14`

    -   Note: Dr. Brown may refer to this data type as a "float" because of language transfer from Python and Julia.

-   `character`

    -   E.g., `"hello world"` and `c("hello", "hola", "hej")`

        -   Note: Dr. Brown will likely refer to this data type as "string" because of language transfer from Python and Julia.

        -   You can extract part of a string with the `sub_str()` function (doc [here](https://stringr.tidyverse.org/reference/str_sub.html)).

-   `logical`

    -   This data type has one of two values, either `TRUE` or `FALSE` (or `T` or `F` for shorthand).

    -   Dr. Brown may refer to this data type as a "Boolean" because of language transfer from Python and Julia.

-   The `class()` function returns the data type of a variable or value.

    -   Eg. `class(5L)` returns `integer`, while `class("hello world")` returns `character`.

**Activity**

-   Students use the `class()` function to become familiar with the data type of the values that they type.

## Operators in R

-   Assignment operator: There are two assignment operators in R. The most common is `<-` but `=` also works. For example:

    -   `fruit <- "apple"`

    -   `fruits <- c("apple", "banana", "orange", "mango")`

        -   Keyboard shortcut in RStudio: `ALT/OPT + -`

    -   `pets = c("dog", "cat", "fish", "Madagascar hissing cockroach")`

    -   `age = 46` (note: this creates a numeric rather than an integer; if an integer is wanted: `age = 46L`)

-   Inclusion operator: `%in%` tests for inclusion of a value in a collection of values (e.g., a vector), for example:

    -   `"apple" %in% c("banana", "apple", "mango")` returns `TRUE`

    -   `"kiwi" %in% c("banana", "apple", "mango")` returns `FALSE`

-   Equal operator: `==` (i.e., two equal signs together with no space between them) tests whether the left-hand value and the right-hand value are identical, for example:

    -   `"mango" == "mango"` returns `TRUE`

    -   `"apple" == "manzana"` returns `FALSE`

    -   `"Hannah" == "HANNAH"` returns `FALSE`

        -   **Super important note**: Computers treat lowercase and uppercase letters differently.

    -   The equal operator can be used with a string on the left-hand side an a vector of strings on the right-hand side, for example:

        -   `"apple" == c("banana", "apple", "mango")` returns `FALSE TRUE FALSE`

        -   **Quick discussion**: Speculate with a neighbor about the reason the above expression returns `FALSE TRUE FALSE.`

**Activity**

-   Students use these three operators to create variables and vectors, and test for inclusion of a string in a vector of strings.

## Comments

-   Comments within computer code helps the human readers, whether other humans or your later self, to quickly understand what the various parts of a computer script do.

-   Comments in R are specified with a hashtag, for example:

```{r}
# assign a value to a variable
dog <- "fido"

# create a vector of multiple elements
kids <- c("Bobby", "Luisa", "José")
```

## `if else` in R

-   The logic is simple: Ask a question, and if the answer is TRUE, then do *this* thing, but if the answer is FALSE, then do *that* thing.

<!-- -->

-   Two approaches to `if else` in R:

    -   The most common approach is to use a code block. See an example in [this Stack Overflow answer](https://stackoverflow.com/a/15393990/2884875).

    -   A less common approach, but super useful for simple `if else` cases, is to use a function:

        -   base R `ifelse()` [function](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/ifelse);

        -   `dpylr` (part of the `tidyverse` ecosystem) `if_else()` [function](https://dplyr.tidyverse.org/reference/if_else.html).

**Activity**

-   Students create a string with a single word, and then use `if else` (either a code block of a function) to print to the user whether the word begins with a vowel or a consonant.

    -   Hint 1: The [`print()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/print) and [`cat()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cat) can be used to print to the console.

    -   Hint 2: The [`sub_str()`](https://stringr.tidyverse.org/reference/str_sub.html) function can be used to extract a sub part of a string.

    -   Hint 3: The [`%in%`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/match) operator tests whether the left-hand value is within the right-hand collection.

## Loops in R

-   The mighty and super useful `for` loop iterates over all elements of a collection (e.g., a vector), for example see below (and see [another example](https://www.datamentor.io/r-programming/for-loop)):

```{r}
#| output: false
# create a vector
fruits <- c("apple", "mango", "banana", "orange")

# loop over the elements of the vector
for (fruit in fruits) {
  print(fruit)  # print the current element to the console
}
```

-   The less-common-but-still-useful `while` loop tests the conditional statement at the beginning of each iteration and runs the body of the loop if the statement evaluates to `TRUE`. See an [example](https://www.datamentor.io/r-programming/while-loop).

-   Useful keywords for both `for` loops and `while` loops:

    -   The `next` keyword skips the rest of the current iteration and continues to the next iteration. This is very much like `continue` in Python and Julia.

    -   The `break` keyword stops the loop completely, regardless of which iteration it was in, and no further iteration are executed.

**Activity**

-   Students create a `for` loop to iterate from 1 to 10, skipping even numbers and printing out odd numbers.

    -   Hint: The [modulus operator](https://www.geeksforgeeks.org/check-if-a-number-is-odd-or-even-in-r-programming/) `%%` will be helpful.

## Defining functions in R

-   A very useful ability in R (and all programming languages) is for a user to define their own custom function.

-   The `function()` function does the trick.

    -   See a [tutorial](https://swcarpentry.github.io/r-novice-inflammation/02-func-R.html).

**Activity**

-   Students define a function that takes as input a word and returns as output a logical value (aka. Boolean value) indicating whether the word begins with one of the five orthographic vowels (i.e., *a*, *e*, *i*, *o*, *u*).

    -   Hint: The [%in%](https://stat.ethz.ch/R-manual/R-devel/library/base/html/match.html) keyword will be helpful here.

-   Now for a little fun and to put these basic programming skills together: Students define a function (likely with smaller helper functions) that translates a sentence from English into Pig Latin. A little refresher on Pig Latin: If a word begins with a vowel, the word *yay* is added to the end of it; if a word begins with a consonant or consonant cluster (e.g., ch, gr), that consonant or consonant cluster is moved to the end of the word followed by *ay*. For example *How are you? \>* *Owhay areyay ouyay?*

    -   Hint: the [stringr](https://stringr.tidyverse.org/) package (part of the [tidyverse](https://www.tidyverse.org/)) will be useful here, especially the [str_c()](https://stringr.tidyverse.org/reference/str_c.html), [str_sub()](https://stringr.tidyverse.org/reference/str_sub.html), [str_split()](https://stringr.tidyverse.org/reference/str_split.html) (and [unlist()](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist)) functions, as will the [letters](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Constants.html) and [LETTERS](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Constants.html) built-in constants.

    -   Hint: After a good-faith effort, if you need help, see the script written by Dr. Brown by clicking on "▶ Code" below.

```{r}
#| code-fold: true
#| output: false

suppressPackageStartupMessages(library("tidyverse"))

# helper function 1, for vowel words
trans_v <-  function(wd, vowels) {
  return(str_c(wd, "yay"))
}

# helper function 2, for consonant words
trans_c <- function(wd, vowels, first_let) {
  second_let <- str_sub(wd, 2, 2)
  if (!str_to_lower(second_let) %in% vowels) {
    first_two <- str_sub(wd, 1, 2)
    rest_wd <- str_sub(wd, 3, str_length(wd))
    return(str_c(rest_wd, first_two, "ay"))
  } else {
    rest_wd <- str_sub(wd, 2, str_length(wd))
    return(str_c(rest_wd, first_let, "ay"))
  }
}

# the main function
trans_pig <- function(sentence, vowels) {
  wds <- unlist(str_split(sentence, "\\s+"))
  trans_sent <- ""
  for (wd in wds) {
    first_let <- str_sub(wd, 1, 1)
    if (str_to_lower(first_let) %in% vowels) {
      # this is a vowel word
      trans_sent <- str_c(trans_sent, trans_v(wd, vowels), " ")
    } else {
      # the current word is a consonant word
      trans_sent <- str_c(trans_sent, trans_c(wd, vowels, first_let), " ")
    }
  }
  return(str_trim(trans_sent))
}

### test the function
sentence <- "I do not like green eggs and ham."
vowels <- c("a", "e", "i", "o", "u")
print(trans_pig(sentence, vowels))

```
