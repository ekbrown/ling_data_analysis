---
title: "File I/O in R"
---

## Objective

-   Students will read data from files and writing data to files.

## Directory operations

-   Computers are structured in a hierarchal filesystem (e.g., "/Users/Fernando/Documents/my_novel.docx").

-   Often, R scripts need to change directories (aka. folders) in order to access specific files.

-   R has several functions to move around a filesystem. Here are a few of them:

    -   `getwd()` ([here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/getwd)) prints to the console the current working directory (i.e., the directory that the script currently has access to).

    -   `setwd()` ([here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/getwd)) sets a directory so that the script has access to it.

    -   `dir()` ([here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/list.files), an alias for `list.files()`) lists the contents of a directory, either only in the one directory or also in all sub-directories (with the `recursive` argument).

## Text files (.txt)

-   **Reading** in data (aka. input) from text files can be accomplished in two ways:

    -   Way 1: Slurp all text in the file at once and hold it in the working memory of the computer:

        -   `scan()` ([here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scan){target="_blank"}) returns a vector (the default) or list.

        -   `readLines()` ([here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/readLines)) in base R returns a vector with each line (i.e., hard return) in the input file as an element. This is a bare-bones version of `scan()`.

        -   `read_lines()` ([here](https://readr.tidyverse.org/reference/read_lines.html)) in the [readr](https://readr.tidyverse.org/) package (part of [tidyverse](https://www.tidyverse.org/)) is a quicker version of `readLines()`.

        -   `read_file()` ([here](https://readr.tidyverse.org/reference/read_file.html)) in the [readr](https://readr.tidyverse.org/) package slurps all text into a single string.

    -   Way 2: Read data line-by-line:

        -   This is useful when the text file is massive and would be difficult to hold in memory at once. This approach holds only one line at a time in memory.

        -   Steps:

            -   Create a connection to the file with the `file()` function ([here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/connections)).

            -   Use the `readLines(n = 1)` function in a `while` loop.

            -   See an example [here](https://stackoverflow.com/a/35761217/2884875).

-   **Writing** out data (aka. output) to a text files can be accomplished with several functions:

    -   `cat()` ([here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cat)) in base R can write out to a text file when the `file` argument gives a pathway to a file.

    -   `writeLines()` ([here](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/writeLines)) is the output version of `readLines()` mentioned above.

    -   `write_lines()` ([here](https://readr.tidyverse.org/reference/read_lines.html)) function is the output version of `read_lines()` mentioned above.

    -   `write_file()` ([here](https://readr.tidyverse.org/reference/read_file.html)) output-equivalent of `read_file()` above.

## CSV files (.csv)

-   **Reading** in tabular datasets from CSV files can be accomplished with several functions:

    -   `read.table()` ([here](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/read.table)) is a versatile function with many arguments, that returns a data frame.

    -   `read_csv()` ([here](https://readr.tidyverse.org/reference/read_delim.html)) in the `readr` package (part of `tidyverse`) reads CSV files that have a **comma** as the separator between columns, and returns a `tibble`.

    -   `read_tsv()` ([here](https://readr.tidyverse.org/reference/read_delim.html)) in the `readr` package reads TSV files that have a **tab** as the separator between columns, and returns a `tibble`.

        -   Note: Some files with the extension .csv or .txt are actually .tsv files, that is, the column separator is a tab.

-   **Writing** out a data frame to a CSV files is a cinch:

    -   `write.table()` ([here](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/write.table)) in base R is the output equivalent of `read.table()` mentioned above.

    -   `write_csv()` ([here](https://readr.tidyverse.org/reference/write_delim.html)) in the `readr` package is the output equivalent of the `read_csv()` mentioned above.

### Activity

1.  Install the tidyverse suite of packages with the command `install.packages("tidyverse")` in the console.

2.  Download some TXT files of your choice (perhaps from [Project Gutenberg](https://www.gutenberg.org/) or Saints.zip from the Canvas Module "Datasets").

3.  Create a script that reads in all TXT files in a directory (and perhaps any subdirectories) and simply print the text to the console.

    1.  Include `library("tidyverse")` at the top of your script (i.e., .r file.)

4.  Ramp it up by breaking up the text into words and printing those to the console.

5.  Now for some fun, as a class let's count the number of words in each text file, and print the name of the file and the number of words to the console.

6.  As a final step, let's write out a CSV file with two columns: column A = the name of the file, column B = the number of words in that file.

## Excel files

1.  Reading in (input) an Excel is easy with [readxl::read_excel()](https://readxl.tidyverse.org/reference/read_excel.html).

    1.  You can specify which worksheet to read (with the `sheet` argument), or even a specific set of cells within a specific worksheet (with the `range` argument).

2.  Writing out (output)

    1.  [xlsx::write.xlsx()](http://www.sthda.com/english/wiki/r-xlsx-package-a-quick-start-guide-to-manipulate-excel-files-in-r#write-data-to-an-excel-file) function does the trick.

### Activity

1.  Download an Excel (.xlsx) file of your choice (perhaps from the Module "Datasets" in Canvas) or use one that's already on your harddrive.

2.  Open the Excel file (in Excel) and inspect the worksheet(s) to figure out where the data is (i.e., sheet name, cell range).

3.  Read in the appropriate worksheet and display it within RStudio with the [`view()`](https://tibble.tidyverse.org/reference/view.html) function.

## Arrow (aka. feather) files

1.  Note: The Arrow ICP file format was formerly known as Feather file format.

2.  This file format is quickly read and written, which are good for big data files.

3.  Reading in (input)

    1.  The [arrow::read_feather()](https://arrow.apache.org/docs/dev/r/articles/read_write.html) function does it.

4.  Writing out (output)

The [arrow::write_feather()](https://arrow.apache.org/docs/dev/r/articles/read_write.html) function does it.

### Activity

-   Download the "freqs_Saints.arrow" file from the Dataset module in Canvas.

-   Read it into R and display it with the [`view()`](https://tibble.tidyverse.org/reference/view.html) function.

## SPSS (.sav), Stata (.dta), and SAS (.sas) files

1.  Reading in (input)

    1.  The [`haven`](https://www.rdocumentation.org/packages/haven/versions/2.2.0) R package does the trick.

2.  Writing out (output)

    1.  Who cares? You should output it as something more cross-platform-friendly like CSV or feather (aka. arrow) or parquet.

### **Activity**

1.  Download the SPSS (.sav) file in the CMS.

2.  Read in the SPSS file and display it with [view()](https://tibble.tidyverse.org/reference/view.html).

## 
