---
title: "Other languages"
engine: julia

---

## Objective

Students will write R code that calls other languages.

## Multilingual programming world

Just like human languages and all their variety and beauty, the variety of programming languages gives beauty to the computer world. More to the point, some programming languages are better suited than others for specific tasks. So, rather than having to be monolingual with only one programming language, we can use several languages as needed.

## Python

It is Dr. Brown's opinion that Python is the best language for text processing (and is an all-around great language for many tasks). Thus, when an R user has a need to do text processing, it might be better to call on Python for that specific task.

### The `reticulate` R package

The [`reticulate`](https://rstudio.github.io/reticulate/) R package allows R users to call Python from within R. Here's a simple example:

```{r}
#| eval: true
# R code here
library("reticulate")
use_python("/usr/local/bin/python3")
```

```{r}
txt <- "The quick brown fox jumped over the lazy dog."

nltk <- import("nltk")
nltk$download("punkt")
nltk$download("averaged_perceptron_tagger")

tokens <- nltk$word_tokenize(txt)
print(tokens)
tagged <- nltk$pos_tag(tokens)
print(tagged)

```

If you know Python (and NLTK), you might remember that the output of this call in Python is a Python `list` of two-item `tuple`s. Differently, here we get an R `list` (which is different from a Python `list`). We could continue to process this R `list` as needed, for example, looping over it in a `for` loop to find particular part-of-speech tags:

```{r}
#| eval: false
# R code here
for (tag in tagged) {
  if (tag[2] == "NN") {
    print(tag[1])
  }
}
```

### Within Quarto documents

We can also write Python code within code blocks in a Quarto document. When working in a Quarto document, you can type a forward slash and get a drop-down menu of possible things to insert into your document, one of which is a Python code block.

The following code blocks are written in a Quarto document (as Dr. Brown uses Quarto document for his lesson plans). The code is pure Python, as if he were writing Python code in a `.py` file. Here's a first simple example:

```{python}
#| eval: true
# Python code here
print("hello Python!")
```

A more meaningful example might be to use the Natural Language Toolkit (NLTK) to tokenize word and perform part-of-speech tagging, like with did above within R using `reticulate`:. Differently, here, we don't need `reticulate` because we calling Python directly on the computer, rather than through R.

```{python}
#| eval: true
# more Python code here
import nltk
nltk.download("punkt")
nltk.download("averaged_perceptron_tagger")
txt = "The quick brown fox jumped over the lazy dog."
tokens = nltk.word_tokenize(txt)
print(tokens)
```

The above code tokenizes the famous sentence in linguistics into a Python `list` of words. Now, let's ask NLTK to

```{python}
import sys
print(sys.version)
```

tag for part-of-speech:

```{python}
#| eval: true
# Python code here
tagged = nltk.pos_tag(tokens)
print(tagged)
```

Those with experience with Python may notice that the output of the above code is a Python `list` with two-item `tuple`s. We're back in the comfort of the Python world! (The R world is comfortable too, though.)

### Activity

Your turn! Write some (simple) R code that calls Python using the `reticulate` package. If you're not sure what to write, just try to get the examlpes on the `reticulate` [docs](https://rstudio.github.io/reticulate/) working.

## Other languages

Many other languages can be called from within R. Some of the most likely to be called from with R are C++ and Julia.

### C++

The [`Rcpp`](https://cran.r-project.org/web/packages/Rcpp/index.html) R package is an awesome way to have R call C++. This is especially useful for bottlenecks that can be sped up with C++ (which runs much, much faster than R). First, let's install `Rcpp`:

```{r}
#| eval: false
install.packages("Rcpp", repos = "http://cran.rstudio.com/")
```

Next, let's

```{r}
#| eval: false
library("Rcpp")
cppFunction('int add(int x, int y, int z) {
  int sum = x + y + z;
  return sum;
}')
# add works like a regular R function
add(1, 2, 3)
```

In addition to defining C++ function within an R script (i.e., an R file) with `cppFunction()`, we can write the C++ code with a `.cpp` file and call that file into an R script with the `sourceCpp()` function. Take a look at the example in Hadley Wickham's book, in chapter 25 ["Rewriting R code in C++"](https://adv-r.hadley.nz/rcpp.html#sourceCpp).

### Julia

The [Julia](https://julialang.org/) programming language is a language oriented towards data science and statistics (very much like R). When you're writing a Quarto document, you can insert a Julia code block by typing a forward slash "/" and selecting the Julia code block option. First, we need to install the `JuliaCall` R package:

```{r}
#| eval: false
install.packages("JuliaCall", repos = "http://cran.rstudio.com/")
```

```{julia}
#| eval: false
# Julia code here
println("hello Julia!")
```

Using [`JuliaCall`](https://cran.r-project.org/web/packages/JuliaCall/), you can also call Julia directly from within R code. See some examples on their [docs](https://cran.r-project.org/web/packages/JuliaCall/readme/README.html).

Other programming languages can be called from within R, but Python, C++ and Julia are probably the most common (in Dr. Brown's uninformed estimation).
